[{"content":"本地搭建 github下载hugo_extended和stack，添加hugo.exe所在目录至环境变量（或者把hugo.exe复制到hugo-dev目录下）\n将stack放在theme目录下，用其exampleSite中的content和hugo.yaml替换hugo主目录中的content和hugo.toml\n删掉content/post中rich-content所有内容，修改配置中的baseURL为https://xujiaz2000.github.io/，并修改其他配置，修改content/page下的各个目录中index.md里的title为中文\n注：hugo主目录配置优先级高于theme目录下的配置（可参考theme下的文件放置位置在主目录配置）\n1 2 3 4 # hugo基本命令 hugo new site ./hugo-dev hugo server -D hugo new content post/HelloWorld/index.md Github部署 新建github仓库（Public，不要README）\n1 xujiaz2000.github.io 删除hugo-dev中的public，重新生成静态页面；进入public，推送远端\n1 2 3 4 5 6 7 8 hugo cd public git init git add . git commit -am \u0026#34;first commit to build the blog\u0026#34; git branch -M main # 强制更名当前分支为main git remote add origin https://github.com/xujiaz2000/xujiaz2000.github.io.git git push -u origin main # 推送并建立关联，之后只需git push xujiaz2000.github.io仓库 - Settings - Pages - Branch选择main后save\nGithub自动部署 新建github仓库（Private，不要README）\n在hugo-dev主目录新建.gitignore并添加\n1 2 3 4 public resources .hugo build.lock hugo.exe 推送远端\n1 2 3 4 5 6 7 echo \u0026#34;# hugo-dev\u0026#34; \u0026gt;\u0026gt; README.md git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/xujiaz2000/hugo-dev.git git push -u origin main personal profile -\u0026gt; Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens -\u0026gt; Tokens (classic)\nNote: TOKEN, Expiration: No expiration, Select scopes: repo \u0026amp; workflow\n记下token，进入hugo-dev -\u0026gt; Settings -\u0026gt; Secrets and variables -\u0026gt; Actions -\u0026gt; New repository secret -\u0026gt; TOKEN\n回到本地hugo-dev目录，新建.github/workflows/hugo_deploy.yaml，参考5配置，修改TOKEN（#{{secrets.TOKEN}}）和REPOSITORY（xujiaz2000/xujiaz2000.github.io）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 1 2 PERSONAL_TOKEN: ${{ secrets.TOKEN }} EXTERNAL_REPOSITORY: xujiaz2000/xujiaz2000.github.io 之后只需在hugo_dev中push即可\n1 2 3 git add . git commit -am \u0026#34;update\u0026#34; git push 绑定域名 华为云 -\u0026gt; 域名注册 -\u0026gt; 使用指南\n搜索域名注册 -\u0026gt; 网站解析 -\u0026gt; 管理解析 -\u0026gt; 添加记录集\n1 2 3 记录类型：CNAME 主机记录：www / 空 记录值：xujiaz2000.github.io github.io仓库 -\u0026gt; Setting -\u0026gt; Pages -\u0026gt; Custom domain\n1 shccc.top Ref Hugo中文文档\nGithub Page部署指南\nStack配置文档\n【雷】Hugo + Github免费搭建博客，并实现自动化部署\nletere的教程\n","date":"2025-06-04T14:55:11+08:00","permalink":"https://xujiaz2000.github.io/p/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2hugo--stack--github/","title":"个人博客搭建与部署：Hugo + Stack + Github"},{"content":"diff：比较两个文件或目录之间的差异\n1 diff -u left.c right.c patch：diff的反向操作\n1 2 patch left.c diff.txt // left.c -\u0026gt; right.c patch -R right.c diff.txt // right.c -\u0026gt; left.c Git特点：分布式，记录照流流，本地操作\u0026amp;远程同步，不适合二进制文档版本控制\nGit安装与配置 Linux\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 1. 包管理器安装 # Ubuntu sudo apt install git sudo apt install git-doc git-svn git-email gitk # Others yum install git yum install git-svn git-email gitk # 2. 从源代码安装 http://git-scm.com/ # 下载,如：git-2.19.0.tar.gz tar -jxvf git-2.19.0.tar.bz2 cd git-2.19.0 # 安装文档再INSTALL文件中 make prefix=/usr/local all sudo make prefix=/usr/local install # 安装Git文档 make prefix=/usr/local doc info sudo make prefix=/usr/local install-doc install-html install-info # 将Git源码中的命令补全脚本复制到bash-completion对于的目录中 cp contrib/completion/git-completion.bash /etc/bash_completion.d/ # 重新加载 ./etc/bash_completion # 为自动加载脚本，修改配置文件~/.bash_profile或/etc/bashrc，在末尾加上 if [ -f /etc/bash_completion ]; then ./etc/bash_completion fi Windows\n1 2 3 4 5 6 7 8 http://git-scm.com/download/win # 不勾选git-lfs # Use Git Bash Only # 测试：git version # 图形界面工具推荐：TortoiseGit http://code.google.com/p/tortoisegit # 建议勾选TortoisePLink作为SSH客户端 # SSH client选择Git提供的客户端：C:\\Program Files\\Git\\usr\\bin\\ssh.exe Git基本配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # 系统配置（对所有用户有效） git config --system core.autocrlf # 用户配置（对该用户有效） git config --global user.name # 仓库配置（只对该项目有效） git config --local remote.origin.url # 配置个人身份 git config --global user.name \u0026#34;ZhangXujia\u0026#34; git config --global user.email xujiaz2000@163.com # 文本换行符配置（Windows） git config --global core.autocrlf true # (Linux) git config --global core.autocrlf false # 文本编码配置 # 中文编码支持 git config --global gui.encoding utf-8 git config --global i18n.commitencoding utf-8 git config --global i18n.logoutputencoding utf-8 # 中文路径支持 git config --global core.quotepath false # 与服务器认证配置 # 1. http/https协议认证 # 设置口令缓存 git config --global credential.helper store # 添加HTTPS证书认证 git config http.sslverigy false # 2. SSH协议认证 # 生成公钥（Git Bash） ssh-keygen -t rsa -C xujiaz2000@163.com cat ~/.ssh/id_rsa.pub # 添加公钥到代码平台：Profile Setting -\u0026gt; SSH Keys -\u0026gt; Add SSH Key -\u0026gt; 复制公钥到Public Key，保存 ssh -T git@github.com # 验证 Git基本命令 Git工程区域\n版本库（Repository），存放版本数据，目录：.git 工作区（Working Directory），存放代码 暂存区（stage），索引，目录：./git/index 文件的三种状态\n已提交（committed），文件已保存到本地数据库 已修改（modified），修改但未提交保存 已暂存（staged），把已修改的文件放在下次提交时要保存的清单中 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # 在本地项目目录LocalProject下，新建git项目仓库 git init LocalProject # 克隆远程工程到本地 git clone [url] # 二进制项目：git lfs clone [url] # 增加/删除/移动文件到暂存区 git add [fileName] git rm [fileName] git mv [srcfilePath] [dstfilePath] # 显示工作目录和暂存区状态 git status # 比较差异 git diff 423b7e8 f2efb8f # 比较两个节点 git diff master ..lin/develop/framework # 比较两个分支 git diff --cached # 比较当前所有和上次提交 --name-status # 参数，只比较文件列表差异 # 提交 git commit fileName -m \u0026#34;commit message\u0026#34; git commit -am \u0026#34;commit message\u0026#34; # 查看提交记录 git log # 参数：--name-status, -p, --pretty, --graph等等 # 推送分支branchName到远端，origin为远端仓库的默认别名，推送的分支名可以新取[:newBranchName] git push origin [branchName[:newBranchName]] # 查看本地工程的所有git分支名称 git branch git branch -r # 查看远端服务器分支 git branch -a # 查看远端和本地分支 # 新建分支（基于当前分支节点创建） git branch newBranchName # 新建不切换 git checkout -b newBranchName # 新建并切换 # 删除分支，-D强制删除 git branch -d branchName # 删除本地分支 git branch -d -r localBranchName # 删除远端分支（步骤1） git push origin localBranchName # 删除后需推送远端（步骤2） # 切换分支，-f强制切换 git checkout branchName # 参数也可以是节点下的文件名 # 拉取远端分支更新，并与本地分支合并 git pull origin remoteBranch:localBranch git pull origin remoteBranch # 分支名相同可缺省 # 拉取但不合并 git fetch origin remoteBranch:localBranch git fetch origin remoteBranch # 分支名相同可缺省 # 分支合并到当前分支（合并分支前的差异节点） git merge branchName git rebase branchName # 改变提交历史（线性化），不建议！ # 撤销add/commit等操作，回退到历史节点 git reset commitID [--mixed/hard/soft] git checkout -- fileName # 回退文件fileName未提交的改动 git checkout . # 回退本地所有修改而未提交的文件内容，用暂存区的所有文件覆盖本地文件 Ref Git官方文档 ","date":"2025-06-04T14:52:56+08:00","permalink":"https://xujiaz2000.github.io/p/learninggit/","title":"LearningGit"},{"content":"这是哪儿？ 欢迎来到我的网站，此博客主要用于分享个人生活和学习笔记 :-)\n","date":"2025-06-04T14:10:04+08:00","permalink":"https://xujiaz2000.github.io/p/helloworld/","title":"HelloWorld"}]